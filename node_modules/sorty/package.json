{
  "name": "sorty",
  "version": "1.2.0",
  "description": "Utility for sorting object arrays on multiple properties",
  "main": "index.js",
  "scripts": {
    "test": "make test",
    "test-w": "make test-w",
    "test-debug": "mocha --debug-brk"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/radubrehar/sorty.git"
  },
  "keywords": [
    "sort",
    "object",
    "array",
    "multi",
    "multiple",
    "property"
  ],
  "author": {
    "name": "Radu Brehar"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/radubrehar/sorty/issues"
  },
  "homepage": "https://github.com/radubrehar/sorty",
  "devDependencies": {
    "mocha": "^2.0.1",
    "should": "^4.3.0"
  },
  "readme": "sorty\n=====\n\n> Sort object arrays on multiple properties with ease.\n\n## Install\n\n```sh\n$ npm install --save sorty\n```\n\n## Usage\n\nExample 1\n```js\nvar sorty = require('sorty')\n\nvar arr = [\n    {name: 'john', age: 20},\n    {name: 'mary', age: 10},\n    {name: 'bill', age: 40},\n    {name: 'john', age: 100}\n]\n\nsorty([\n    {name: 'name', dir: 'asc'},\n    {name: 'age',  dir: 'desc', type: 'number'}\n], arr)\n\n\n//arr.should.eql(\n[\n    {name: 'bill', age: 40},\n    {name: 'john', age: 100},\n    {name: 'john', age: 20},\n    {name: 'mary', age: 10}\n]\n//)\n```\n\nExample 2\n```js\nvar sort = sorty([\n    {name: 'name', dir: 'asc'},\n    {name: 'age',  dir: 'desc', type: 'number'}\n])\n\n//now sort is a function that can be passed an array to sort it\n\nsort(arr)\n```\n\n`sorty` returns the sorted array. Under the hoods, all it does is build a composed sort function, based on the given sort info, and call `array.sort` with that function.\n\nYou can specify a sort function in the sortInfo. **The sort function should always sort in ascending order!**. Actual sorting direction should be specified in the **dir** property.\n\n### Sort info\nExample of valid sort info:\n\n```js\n//an array\n[\n    //specify the type of values  - valid types: 'string' and 'number'\n    { name: 'age', type: 'number'},\n    { name: 'name', dir: 1 } //1 or asc (vs -1 or desc)\n]\n\n//an object - sort by only 1 property\n{\n    name: 'age'\n}\n\n//specify custom sort fn\n[\n    //since age may be string, but with numeric values, use a custom sort fn\n    {name: 'age', fn: function(a, b){ return a * 1 - b * 1}, dir: 'desc' },\n    {name: 'name', dir: 'asc'}\n]\n```\n\nValid sort types for now are:\n\n * 'string'\n * 'number'\n\nThe sort direction is specified in the **dir** property. Valid values are:\n\n * 1 (or 'asc', or any negative number)\n * -1 (or 'desc', or any positive number)\n\nIf you specify 0 (or any valsy value) for the sort direction, the sorting will not be done for the given property, but only for all other properties.\n\nYou can specify custom sort functions in the **fn** property. Those should always sort in ascending order!\n\n## API\n\n`sorty(sortInfo, array) // => sorted array` - sorty sorts the array in-place and returns it\n`sorty(sortInfo) // => fn` - returns a curried version of sorty, which can be passed in an array, and will sort it, based on the sortInfo that was specified\n`sorty.getFunction(sortInfo) // => sorting function` - sorty.getFunction returns the composed sort function, that can be used to sort an array.\n\n## More examples\n\n\nYou can get a curried version, and just pass in an array afterwards, to get back the sorted array\n```js\nvar sorty = require('sorty')\nvar sort  = sorty([\n    {name: 'age', fn: function(a, b){ return a*1 - b * 1}, dir: 'desc' },\n    {name: 'name', dir: 'asc'}\n])\n\nsort(arr)\n```\n\nYou can get a sort function, and use it with array.sort\n```js\nvar sorty = require('sorty')\nvar sortFn  = sorty.getFunction([\n    {name: 'age', fn: function(a, b){ return a*1 - b * 1}, dir: 'desc' },\n    {name: 'name', dir: 'asc'}\n])\n\narr.sort(sortFn)\n```\n\nRegular usage\n```js\nvar sorty = require('sorty')\n\nvar arr = [\n    { age: '5', name: 'mary'},\n    { age: '5', name: 'bob'},\n    { age: '15', name: 'monica'},\n    { age: '15', name: 'adam'}\n]\n\nsorty([\n    {name: 'age', fn: function(a, b){ return a*1 - b * 1}, dir: 'desc' },\n    {name: 'name', dir: 'asc'}\n], arr)\n\narr.should.eql([\n    { age: '15', name: 'adam'},\n    { age: '15', name: 'monica'},\n    { age: '5', name: 'bob'},\n    { age: '5', name: 'mary'}\n])\n```\n\n```js\nvar sorty = require('sorty')\n\nvar arr = [\n    { age: '5', name: 'mary'},\n    { age: '5', name: 'bob'},\n    { age: '15', name: 'monica'},\n    { age: '15', name: 'adam'}\n]\n\nsorty(\n    {name: 'name', dir: 'asc'}\n, arr)\n\narr.should.eql([\n    { age: '15', name: 'adam'},\n    { age: '5', name: 'bob'},\n    { age: '5', name: 'mary'},\n    { age: '15', name: 'monica'}\n])\n```\n\nSpecifying 0 (or any falsy value) as sort dir will skip the sort for the given property\n\n```js\nvar sorty = require('sorty')\n\nvar arr = [\n    { age: '5', name: 'mary'},\n    { age: '5', name: 'bob'},\n    { age: '15', name: 'monica'},\n    { age: '15', name: 'adam'}\n]\n\nsorty([\n    {name: 'age', dir: 0 },\n    {name: 'name', dir: 1}\n], arr)\n//will sort only by name, asc\n\narr.should.eql([\n    { age: '15', name: 'adam'},\n    { age: '5', name: 'bob'},\n    { age: '5', name: 'mary'},\n    { age: '15', name: 'monica'}\n])\n```",
  "readmeFilename": "README.md",
  "gitHead": "527445d7516ff58c66b67329bc8ec8870f4c4857",
  "_id": "sorty@1.2.0",
  "_shasum": "2511a07f8353fac5b25d75b6628e54a761f11527",
  "_from": "sorty@*"
}
